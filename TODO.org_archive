* [DONE] Convert to CoffeeScript
* [DONE] Figure out why I have to toggle to get keybindings to work
  * It's because I was using activationCommand.  If it's absent, atom will
    activate your package by default.
  * [DONE] Request a change to the flight manual to point this out more explicitly
* [DONE] Remove toggle, it's not being used.
* [DONE] Extract the star finding logic -- it's going to be reused somewhat heavily
* Initial commit
  * [DONE] Create github repository for organized project
  * [DONE] Set version number in project.json
* [DONE] Figure out why styles do not work consistently
* Page Organization
  * [DONE] Add support for atx/markdown-style headings (#, ##, ###, etc)
* Outlining
  * [DONE] Implement indent
  * [DONE] Implement unindent
  * [DONE] Figure out how to group undos for indent and unindent
  * [DONE] Setting of whether you want different depth levels to be shown
    as multiple stars or as whitespace and stars
  * [DONE] Support numbers as outline levels
  * [DONE] Hitting enter at the beginning of a line shouldn't delete the content of the line
  * [DONE] Highlighting multiple lines and indenting should indent all of the lines
  * [DONE] Underlines
    * [DONE] Add grammar for underlined portion
    * [DONE] Add styles for underlines
  * [DONE] bold
    * [DONE] Add grammar for bold
    * [DONE] Add style for bold
  * [DONE] If you newline after a level 1 and there are already indented bullets underneath, the new line
    should be at that new level of depth
* Improve return key Support
  * [DONE] If you press ctrl-return you should have a star at the same level on
    a new line.
  * [DONE] If you press return you should get a new line without a star
  * [DONE] Make this behavior configurable so users can turn it off if they
    don't like it.
  * [DONE] If you hit enter on a level created with multiple stars, the new line should also be multi-star
* [DONE] Support Atom's tab-length setting
* [DONE] Support Atom's tab type settings (soft and hard)
* Links
  * [DONE] Highlighting
  * [DONE] Support [markdown-style](https://daringfireball.net/projects/markdown/syntax#link) links
* Todos
  * [DONE] Key command to toggle "TODO", "DONE", remove todo
  * [DONE] Support multiple cursors for TODO toggling.
  * Todos for SidePanel
    * [DONE] UI for all TODO's in directory
    * [DONE] Configuration to show what directories we'll scan for TODO items
    * [DONE] Click-through from TODO to source code location
    * [DONE] Checkboxes on the todo item to automatically mark it as completed
    * [DONE] Styling for todo
    * [DONE] Refresh button for todo items
    * [DONE] Automatically refresh todo items
    * [DONE] Resizing for todo panel
    * [DONE] Don't select text while resizing
* Promotion
  * [DONE] Improve the readme file to work on some of Organized's best features.
  * [DONE] Write a roadmap of the next few versions to show what I'm planning
  * [DONE] Add license and contribution policy
* Tables
  * Syntax highlighting
    * [DONE] Border have special color
  * [DONE] Command to open a table
  * [DONE] Command to close a table
* Schedules
  * Timestamps
    * [DONE] Syntax highlighting for timestamps
    * [DONE] Key command to insert a timestamp
    * [DONE] Create new agenda section in sidebar for timestamp / scheduled tasks
    * [DONE] Show timestamps in agenda
  * [DONE] Support "SCHEDULED" tags inside of organized files
  * [DONE] Add Agenda pane to sidebar
  * [DONE] Add key command to add a schedule date
  * [DONE] Support Org-mode style dates
  * [DONE] Support ISO-8601 style dates
* Source blocks
  * [DONE] Source block code highlighting
    * Start with languages that I use regularly
      * [DONE] CoffeeScript
      * [DONE] CSS
      * [DONE] Java
      * [DONE] Javascript
      * [DONE] Less
      * [DONE] Python
      * [DONE] Shell
      * [DONE] SQL
    * Then let's add other popular languages
      * [DONE] C
      * [DONE] C#
      * [DONE] Golang
      * [DONE] Objective C
      * [DONE] PHP
      * [DONE] Ruby
      * [DONE] Perl
    * This will depend a bit on how well those language grammars support embedding
  * [DONE] Execute commands in a source block (except Java)
  * Add execution support for:
    * [DONE] Java
    * [DONE] C
    * [DONE] Cpp
    * [DONE] Golang
    * [DONE] Objective C
    * [DONE] PHP
  * [DONE] Errors aren't being handled gracefully in c or cpp
* Tags
  * [DONE] Syntax highlighting for tags
* Code structure / Technical debt
  * [DONE] Replace endless star methods with a single method that collects all the info
  * [DONE] Break out codeblocks into separate class
  * [DONE] Extract toolbar support into separate class
* Tests
  * I'm already getting to the point where it is difficult to retest everything and I only have 250 line CoffeeScript
    file.  We need some spec tests.
  * [DONE] Learn how to write spec tests
  * [DONE] Write tests for all existing functionality
* Coding templates / helpful keystrokes
  * [DONE] Insert ISO-8601 Date
  * [DONE] Insert ISO-8601 Datetime
* Toolbar
  * [DONE] Create a toolbar
  * [DONE] Button to create a new link or make existing string into a link
  * [DONE] Button to bold
  * [DONE] Button to underline
  * [DONE] Button for H1, H2, H3
  * [DONE] Toolbar only present when grammar is active
